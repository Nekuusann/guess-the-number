import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../bloc/game_bloc.dart';

class HomeScreen extends StatefulWidget {

  const HomeScreen({Key? key}) : super(key: key);

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int? maxNumber;

  final TextEditingController _nController = TextEditingController();
  final TextEditingController _mController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFFCFCFC),
      body: SingleChildScrollView(
        keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,
        child: Column(
          children: [
            BlocBuilder<GameBloc, GameState>(
              builder: (context, state) {
                final isGameInProgress = state is GameInProgress;
                final color = state is GameWon
                    ? const Color(0xFF4CAF50) // –ó–µ–ª–µ–Ω—ã–π –ø—Ä–∏ –ø–æ–±–µ–¥–µ
                    : state is GameLost
                    ? const Color(0xFFF44336) // –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
                    : const Color(0xFF073042); // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç

                return AnimatedContainer(
                  duration: const Duration(milliseconds: 300),
                  height: isGameInProgress || state is GameWon || state is GameLost
                      ? MediaQuery.of(context).size.height * 0.15
                      : MediaQuery.of(context).size.height * 0.35,
                  width: double.infinity,
                  color: color,
                  child: Padding(
                    padding: const EdgeInsets.only(top: 50),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Align(
                          alignment: Alignment.topCenter,
                          child: Text(
                            "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ",
                            style: TextStyle(
                              fontSize: isGameInProgress || state is GameWon || state is GameLost ? 24 : 32,
                              fontWeight: FontWeight.bold,
                              color: const Color(0xFFEBF0DC),
                              fontFamily: "Pacifico-Regular",
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                        if (!(isGameInProgress || state is GameWon || state is GameLost)) ...[
                          const SizedBox(height: 16),
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 25.0, vertical: 10.0),
                            child: Column(
                              children: [
                                Container(
                                  padding: const EdgeInsets.symmetric(vertical: 15.0, horizontal: 10.0),
                                  decoration: BoxDecoration(
                                    color: const Color(0xFFEFF7CF),
                                    borderRadius: BorderRadius.circular(25.0),
                                  ),
                                  child: const Text(
                                    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä–µ \"–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ\"! –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –Ω–∞–≤—ã–∫–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è. \n"
                                        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ n. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —É–≥–∞–¥–∞—Ç—å –µ–≥–æ –∑–∞ m –ø–æ–ø—ã—Ç–æ–∫.",
                                    style: TextStyle(
                                      fontSize: 14,
                                      color: Color(0xFF073042),
                                      fontFamily: "RobotoMono-Medium",
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                );
              },
            ),
            const SizedBox(height: 16),
            BlocBuilder<GameBloc, GameState>(
              builder: (context, state) {
                if (state is GameInitial) {
                  return _buildSetupScreen(context);
                } else if (state is GameInProgress) {
                  return _buildGameScreen(context, state);
                } else if (state is GameWon) {
                  print("–°–æ—Å—Ç–æ—è–Ω–∏–µ: GameWon");
                  return _buildEndScreen(context, "–¢—ã –≤—ã–∏–≥—Ä–∞–ª! –ú–æ–ª–æ–¥—á–∏–Ω–∫–∞! üéâ");
                } else if (state is GameLost) {
                  print("–°–æ—Å—Ç–æ—è–Ω–∏–µ: GameLost");
                  return _buildEndScreen(
                    context,
                    "–≠—Ö—Ö, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç. –ó–∞–≥–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º –±—ã–ª–æ: ${state.correctNumber}",
                  );
                }
                return const SizedBox.shrink();
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSetupScreen(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(25.0, 10.0, 25.0, 0.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          const Text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω (n), –≤ –∫–æ—Ç–æ—Ä–æ–º —è –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ.",
            style: TextStyle(
              fontSize: 18,
              color: Color(0xFF073042),
              fontFamily: "Roboto-Medium"
            ),
          ),
          const SizedBox(height: 16),
          TextField(
            key: const Key("maxNumberField"),
            controller: _nController,
            decoration: InputDecoration(
              labelText: "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (n)",
              filled: true,
              fillColor: const Color(0xFFEDDEE8),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(30.0),
              ),
              enabledBorder: OutlineInputBorder(
                borderSide: const BorderSide(color: Color(0xFFCABBC5), width: 1.0),
                borderRadius: BorderRadius.circular(30.0),
              ),
            ),
            keyboardType: TextInputType.number,
          ),
          const SizedBox(height: 16),
          const Text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (m).",
            style: TextStyle(
                fontSize: 18,
                color: Color(0xFF073042),
                fontFamily: "Roboto-Medium"
            ),
          ),
          const Text(
            "(–ß–∏—Å–ª–æ m –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —á–∏—Å–ª—É n!)",
            style: TextStyle(
              fontSize: 13,
              color: Color(0xFF949494),
              fontFamily: "Roboto-Regular"
            ),
          ),
          const SizedBox(height: 16),
          TextField(
            key: const Key("maxAttemptField"),
            controller: _mController,
            decoration: InputDecoration(
              labelText: "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (m)",
              filled: true,
              fillColor: Color(0xFFEDDEE8),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(30.0),
              ),
              enabledBorder: OutlineInputBorder(
                borderSide: const BorderSide(color: Color(0xFFCABBC5), width: 1.0),
                borderRadius: BorderRadius.circular(30.0),
              ),
            ),
            keyboardType: TextInputType.number,
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () {
              final n = int.tryParse(_nController.text);
              final m = int.tryParse(_mController.text);

              if (n == null || m == null || m >= n) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–≤ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"),
                  ),
                );
              } else {
                context.read<GameBloc>().add(StartGame(n, m));
              }
            },
            style: ElevatedButton.styleFrom(
              foregroundColor: const Color(0xFFEFF7CF),
              backgroundColor: const Color(0xFF073042),
              padding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 32.0),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(30.0),
              ),
            ),
            child: const Text("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ"),
          ),
        ],
      ),
    );
  }

  Widget _buildGameScreen(BuildContext context, GameInProgress state) {
      return Padding(
        padding: const EdgeInsets.fromLTRB(25.0, 10.0, 25.0, 0.0),
        child: Column(
          children: [
            Text(
                "–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${state.remainingAttempts}",
                style: const TextStyle(
                  fontSize: 18,
                  color: Color(0xFF073042),
                  fontFamily: "Roboto-Medium"
                )
            ),
            if (state.feedback.isNotEmpty)
              Text(
                state.feedback,
                style: const TextStyle(
                  color: Color(0xFF949494),
                  fontSize: 16,
                  fontFamily: "RobotoMono-Regular"
                )
              ),
            const SizedBox(height: 16),
            TextField(
              decoration: InputDecoration(
                labelText: "–í–≤–µ–¥–∏ —Å–≤–æ—ë —á–∏—Å–ª–æ",
                filled: true,
                fillColor: Color(0xFFEDDEE8),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(30.0),
                ),
                enabledBorder: OutlineInputBorder(
                  borderSide: const BorderSide(color: Color(0xFFCABBC5), width: 1.0),
                  borderRadius: BorderRadius.circular(30.0),
                ),
              ),
              keyboardType: TextInputType.number,
              onSubmitted: (value) {
                final guess = int.tryParse(value);
                if (guess != null) {
                  context.read<GameBloc>().add(MakeGuess(guess));
                }
              },
            ),
          ],
        ),
    );
  }

  Widget _buildEndScreen(BuildContext context, String message) {
    final color = message.contains("–≤—ã–∏–≥—Ä–∞–ª") ? const Color(0xFF4CAF50) : const Color(0xFFF44336);

    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        Text(
          message,
          style: const TextStyle(
            fontSize: 24,
            color: Color(0xFF073042),
            fontFamily: "Roboto-Medium",
          ),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 24),
        ElevatedButton(
          onPressed: () {
            context.read<GameBloc>().add(RestartGame());
          },
          style: ElevatedButton.styleFrom(
            foregroundColor: const Color(0xFFEFF7CF),
            backgroundColor: const Color(0xFF073042),
            padding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 32.0),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(30.0),
            ),
          ),
          child: const Text("–ñ–µ–ª–∞–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?"),
        ),
      ],
    );
  }
}